name: dev-ml/llamafile-bin Update

permissions:
  contents: write

on:
  schedule:
    - cron: '30 1 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/dev-ml-llamafile-bin-update.yaml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ebuild_category: dev-ml
  ebuild_name: llamafile-bin
  github_owner: Mozilla-Ocho
  github_repo: llamafile
  description: " Distribute and run LLMs with a single file. "
  homepage: "https://llamafile.ai/"
  workflowfile: "dev-ml-llamafile-bin-update.yaml"
  license: "Apache 2.0"

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils
          url="$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/arran4/g2/releases/latest | jq -r '.assets[].browser_download_url | select(endswith("_linux_amd64.deb"))')"
          echo "$url"
          wget "${url}" -O /tmp/g2.deb
          sudo dpkg -i /tmp/g2.deb
          rm /tmp/g2.deb

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${{env.ebuild_category}}/${{env.ebuild_name}}"
          mkdir -p $ebuild_dir
          tags=$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/${{env.github_owner}}/${{env.github_repo}}/releases | jq -r '.[].tag_name')
          
          for tag in ${tags}; do
            version=${tag}
            if ! echo "$version" | egrep '^([0-9]+)\.([0-9]+)(\.([0-9]+))?(-r[0-9]+)?((_)(alpha|beta|rc|p)[0-9]*)*$'; then
              echo "$version doesn't match regexp";
              continue; 
            fi
            ebuild_file="${ebuild_dir}/${{env.ebuild_name}}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              # Create ebuild script
              {
                echo "# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/${{ env.workflowfile }}"
                echo "EAPI=8"
                echo "DESCRIPTION=\"$description\""
                echo "HOMEPAGE=\"$homepage\""
                echo 'IUSE="doc man"'
                echo 'SRC_URI="amd64? ( https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/${PV}/${{env.github_repo}}-${PV}.zip -> ${P}.amd64.zip )"'
                echo "LICENSE=\"${{ env.license }}\""
                echo "SLOT=\"0\""
                echo 'KEYWORDS="~amd64"'
                echo 'RDEPEND=""'
                echo 'DEPEND="${RDEPEND}"'
                echo "S=\"\${WORKDIR}/${{env.github_repo}}-\${PV}\""
                echo ""
                echo "src_install() {"
                echo "    exeinto /opt/bin"
                echo "    doexe bin/*"
                echo "    if use doc; then"
                echo "      dodoc README.md"
                echo "      dodoc share/doc/llamafile/*"
                echo "    fi"
                echo "    if use man; then"
                echo "      doman share/man/man1/*"
                echo "    fi"
                echo "}"
                echo ""
              } > $ebuild_file

              # Generate the manifest for the new ebuild
              g2 manifest upsert-from-url "https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/${tag}/${{env.github_repo}}-${version}.zip" "/tmp/${{env.ebuild_name}}-${version}.amd64.zip" "${ebuild_dir}/Manifest"
            fi
            break
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${ebuild_category}/${ebuild_name}"
          git add "./${ebuild_dir}"
          git commit -m "Add ebuilds for new ${ebuild_name} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
