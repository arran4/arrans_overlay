# Generated using: https://github.com/arran4/arrans_overlay_workflow_builder 0.1.17 Github AppImage Release current.config 2025-07-03 22:51:46.551489166 +0000 UTC m=+0.006581153

name: app-misc/czkawka-appimage update

permissions:
  contents: write

on:
  schedule:
    - cron: '28 12 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/app-misc-czkawka-appimage-update.yaml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ecn: app-misc
  epn: czkawka-appimage
  description: "Multi functional app to find duplicates, empty folders, similar images etc."
  homepage: "https://github.com/qarmin/czkawka"
  github_owner: qarmin
  github_repo: czkawka
  keywords: ~amd64
  workflow_filename: app-misc-czkawka-appimage-update.yaml
  czkawka_gui_desktop_file: 'com.github.qarmin.czkawka.desktop'
  czkawka_gui_appimage_installed_name: 'czkawka_gui.AppImage'
  czkawka_gui_release_name_amd64: 'linux_czkawka_gui.AppImage'
  czkawka_gui_minimal_desktop_file: 'com.github.qarmin.czkawka.desktop'
  czkawka_gui_minimal_appimage_installed_name: 'czkawka_gui_minimal.AppImage'
  czkawka_gui_minimal_release_name_amd64: 'linux_czkawka_gui_minimal.AppImage'

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
            sudo apt-get update
            sudo apt-get install -y wget jq coreutils
            url="$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/arran4/g2/releases/latest | jq -r '.assets[].browser_download_url | select(endswith("_linux_amd64.deb"))')"
            echo "$url"
            wget "${url}" -O /tmp/g2.deb
            sudo dpkg -i /tmp/g2.deb
            rm /tmp/g2.deb

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          mkdir -p $ebuild_dir
          declare -A releaseTypes=()
          tags=$(curl -s  --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/${{ env.github_owner }}/${{ env.github_repo }}/releases | jq -r '.[].tag_name')
          for tag in $tags; do
            version="${tag}"
            originalVersion="${version}"
            if ! echo "${version}" | egrep '^([0-9]+)\.([0-9]+)(\.([0-9]+))?(-r[0-9]+)?((_)(alpha|beta|rc|p)[0-9]*)*$'; then
                echo "version: $version doesn't match regexp";
                continue;
            fi
            releaseType="$(echo "${version}" | sed -n 's/^[^_]\+_\(alpha\|beta\|rc\|p[0-9]*\).*$/\1/p')"
            if [[ ! -v releaseTypes[${releaseType:=release}] ]]; then
                releaseTypes[${releaseType:=release}]="$version"
            else
                echo "Already have a newier ${releaseType:=release} release: ${releaseTypes[${releaseType:=release}]}"
                continue
            fi
            ebuild_file="${ebuild_dir}/${{ env.epn }}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then

              {
                echo '# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/${{ env.workflow_filename }}'
                echo 'EAPI=8'
                echo "DESCRIPTION=\"${{ env.description }}\""
                echo "HOMEPAGE=\"${{ env.homepage }}\""
                echo 'LICENSE="MIT"'
                echo 'SLOT="0"'
                echo 'KEYWORDS="${{ env.keywords }}"'
                echo 'IUSE=""'
                echo 'DEPEND=""'
                echo 'RDEPEND="sys-libs/glibc sys-libs/zlib "'
                echo 'S="${WORKDIR}"'
                echo 'RESTRICT="strip"'
                echo ''
                echo "inherit xdg-utils"
                echo ''
                echo 'SRC_URI="'
                echo "  amd64? ( https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/linux_czkawka_gui.AppImage -> \${P}-linux_czkawka_gui.AppImage )"
                echo "  amd64? ( https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/linux_czkawka_gui_minimal.AppImage -> \${P}-linux_czkawka_gui_minimal.AppImage )"
                echo '"'
                echo ''
                echo 'src_unpack() {'
                echo '  if use amd64; then'
                echo "    cp \"\${DISTDIR}/\${P}-${{ env.czkawka_gui_release_name_amd64 }}\" \"${{ env.czkawka_gui_appimage_installed_name }}\"  || die \"Can't copy downloaded file\""
                echo '  fi'
                echo '  chmod a+x "${{ env.czkawka_gui_appimage_installed_name }}"  || die "Can'\''t chmod archive file"'
                echo '  "./${{ env.czkawka_gui_appimage_installed_name }}" --appimage-extract "${{ env.czkawka_gui_desktop_file }}" || die "Failed to extract .desktop from appimage"'
                echo '  "./${{ env.czkawka_gui_appimage_installed_name }}" --appimage-extract "usr/share/icons" || die "Failed to extract hicolor icons from app image"'
                echo '  "./${{ env.czkawka_gui_appimage_installed_name }}" --appimage-extract "*.png" || die "Failed to extract root icons from app image"'
                echo '  if use amd64; then'
                echo "    cp \"\${DISTDIR}/\${P}-${{ env.czkawka_gui_minimal_release_name_amd64 }}\" \"${{ env.czkawka_gui_minimal_appimage_installed_name }}\"  || die \"Can't copy downloaded file\""
                echo '  fi'
                echo '  chmod a+x "${{ env.czkawka_gui_minimal_appimage_installed_name }}"  || die "Can'\''t chmod archive file"'
                echo '  "./${{ env.czkawka_gui_minimal_appimage_installed_name }}" --appimage-extract "${{ env.czkawka_gui_minimal_desktop_file }}" || die "Failed to extract .desktop from appimage"'
                echo '}'
                echo ''
                echo 'src_prepare() {'
                echo "  sed -i 's:^Exec=.*:Exec=/opt/bin/${{ env.czkawka_gui_appimage_installed_name }}:' 'squashfs-root/${{ env.czkawka_gui_desktop_file }}'"
                echo "  sed -i 's:^Exec=.*:Exec=/opt/bin/${{ env.czkawka_gui_minimal_appimage_installed_name }}:' 'squashfs-root/${{ env.czkawka_gui_minimal_desktop_file }}'"
                echo "  find squashfs-root -type f \( -name index.theme -or -name icon-theme.cache \) -exec rm {} \; "
                echo "  find squashfs-root -type d -exec rmdir -p --ignore-fail-on-non-empty {} \; "
                echo '  eapply_user'
                echo '}'
                echo ''
                echo 'src_install() {'
                echo '  exeinto /opt/bin'
                echo '  doexe "${{ env.czkawka_gui_appimage_installed_name }}" || die "Failed to install AppImage"'
                echo '  doexe "${{ env.czkawka_gui_minimal_appimage_installed_name }}" || die "Failed to install AppImage"'
                echo '  insinto /usr/share/applications'
                echo '  doins "squashfs-root/${{ env.czkawka_gui_desktop_file }}" || die "Failed to install desktop file"'
                echo '  doins "squashfs-root/${{ env.czkawka_gui_minimal_desktop_file }}" || die "Failed to install desktop file"'
                echo '  insinto /usr/share/icons'
                echo '  doins -r squashfs-root/usr/share/icons/hicolor || die "Failed to install icons"'
                echo '  insinto /usr/share/pixmaps'
                echo '  doins squashfs-root/*.png || die "Failed to install icons"'
                echo '}'
                echo ""
                echo "pkg_postinst() {"
                echo "  xdg_desktop_database_update"
                echo "}"
                echo ""
              } > $ebuild_file

              # Manifest generation

              g2 manifest upsert-from-url "https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/linux_czkawka_gui.AppImage" "${{ env.epn }}-${version}-linux_czkawka_gui.AppImage" "${ebuild_dir}/Manifest"
              g2 manifest upsert-from-url "https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/linux_czkawka_gui_minimal.AppImage" "${{ env.epn }}-${version}-linux_czkawka_gui_minimal.AppImage" "${ebuild_dir}/Manifest"
              echo "generated_tag=${tag}" >> $GITHUB_OUTPUT
            fi
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${{ env.epn }} releases tag ${generated_tag}" &&
          git pull --rebase &&
          git push || true
        if: steps.process_releases.outputs.generated_tag
