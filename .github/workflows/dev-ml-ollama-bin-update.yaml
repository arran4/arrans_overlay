# Manually built - TODO make automated
name: dev-ml/ollama-bin update

permissions:
  contents: write

on:
  schedule:
    - cron: '45 0 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/dev-ml-ollama-bin-update.yaml'


concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ecn: dev-ml
  epn: ollama-bin
  description: "Get up and running with Llama 3, Mistral, Gemma, and other large language models."
  homepage: "https://ollama.com"
  github_owner: ollama
  github_repo: ollama

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils tar
          url="$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/arran4/g2/releases/latest | jq -r '.assets[].browser_download_url | select(endswith("_linux_amd64.deb"))')"
          echo "$url"
          wget "${url}" -O /tmp/g2.deb
          sudo dpkg -i /tmp/g2.deb
          rm /tmp/g2.deb

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          mkdir -p $ebuild_dir
          tags=$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/${{ env.github_owner }}/${{ env.github_repo }}/releases | jq -r '.[].tag_name')
          for tag in $tags; do
            version="${tag#v}"
            if [ "${version}" = "${tag}" ]; then
              echo "$version == $tag so there is no V removed skipping"
              continue
            fi
            if ! echo "$version" | egrep '^([0-9]+)\.([0-9]+)(\.([0-9]+))?(-r[0-9]+)?((_)(alpha|beta|rc|p)[0-9]*)*$'; then
              echo "tag / $version doesn't match regexp";
              continue; 
            fi
            ebuild_file="${ebuild_dir}/${{ env.epn }}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              {
                echo "# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/"
                echo 'EAPI=8'
                echo "DESCRIPTION=\"${{ env.description }}\""
                echo "HOMEPAGE=\"${{ env.homepage }}\""
                echo 'LICENSE="MIT"'
                echo 'SLOT="0"'
                echo 'KEYWORDS="~amd64 ~arm64"'
                echo 'IUSE="+systemd -rocm"'
                echo 'DEPEND="acct-user/ollama acct-group/ollama"'
                echo 'RDEPEND="acct-user/ollama acct-group/ollama"'
                echo 'S="${WORKDIR}"'
                echo 'RESTRICT="strip"'
                echo ''
                echo "inherit xdg-utils"
                echo ''
                echo 'SRC_URI="  '
                echo '  amd64? ( https://github.com/ollama/ollama/releases/download/v${PV}/ollama-linux-amd64.tgz  -> $P.amd64.tgz  )'
                echo '  arm64? ( https://github.com/ollama/ollama/releases/download/v${PV}/ollama-linux-arm64.tgz  -> $P.arm64.tgz  )'
                echo '  rocm? ( https://github.com/ollama/ollama/releases/download/v${PV}/ollama-linux-amd64-rocm.tgz -> $P.rocm.tgz )'
                echo '" '
                echo ''
                echo "src_unpack() {"
                echo "  if use rocm; then"
                echo "    tar -xzvf \${DISTDIR}/\${P}.rocm.tgz -C '\${WORKDIR}' || die \"Can't extract rocm tgz\""
                echo "  fi"
                echo '  if use amd64; then'
                echo '    tar -xzvf "${DISTDIR}/${P}.amd64.tgz" -C '\${WORKDIR}' || die "Failed to extract binary"'
                echo '  elif use arm64; then'
                echo '    tar -xzvf "${DISTDIR}/${P}.arm64.tgz" -C '\${WORKDIR}' || die "Failed to extract binary"'
                echo '  fi'
                echo "}"
                echo ""
                echo "src_install() {"
                echo '  exeinto /opt/Ollama/bin'
                echo '  doexe "${WORKDIR}/bin/ollama" || die "Failed to install binary"'
                echo '  insinto /opt/Ollama/lib/'
                echo '  doins -r "${WORKDIR}/lib/ollama/" || die "Failed to install libraries"'
                echo '  dosym /opt/Ollama/bin/ollama /opt/bin/ollama'
                echo "}"
                echo ""
                echo "src_prepare() {"
                echo "  eapply_user"
                echo "}"
                echo ""
                echo "pkg_postinst() {"
                echo "  einfo \"Quick guide:\""
                echo "  einfo \"ollama serve\""
                echo "  einfo \"ollama run llama3:70b\""
                echo "  einfo \"See available models at https://ollama.com/library\""
                echo "  if use systemd; then"
                echo "    einfo \"Creating systemd service file...\""
                echo '    {'
                echo '      echo "[Unit]"'
                echo '      echo "Description=Ollama Service"'
                echo '      echo "After=network-online.target"'
                echo '      echo ""'
                echo '      echo "[Service]"'
                echo '      echo "ExecStart=/opt/Ollama/bin/ollama serve"'
                echo '      echo "User=ollama"'
                echo '      echo "Group=ollama"'
                echo '      echo "Restart=always"'
                echo '      echo "RestartSec=3"'
                echo '      echo ""'
                echo '      echo "[Install]"'
                echo '      echo "WantedBy=default.target"'
                echo '    } > /usr/lib/systemd/system/ollama.service'
                echo "    einfo \"Service file created at /etc/systemd/system/ollama.service\""
                echo "    einfo \"Making service user-startable...\""
                echo '    mkdir -p /etc/systemd/user'
                echo '    ln -s /usr/lib/systemd/system/ollama.service /etc/systemd/user/ollama.service'
                echo '    ln -s /usr/lib/systemd/system/ollama.service /etc/systemd/system/ollama.service'
                echo "  fi"
                echo "}"
                echo ""
              } > $ebuild_file

              # Generate the manifest for the new ebuild
              g2 manifest upsert-from-url https://github.com/ollama/ollama/releases/download/${tag}/ollama-linux-amd64.tgz ${{ env.epn }}-${version}.amd64.tgz "${ebuild_dir}/Manifest"
              g2 manifest upsert-from-url https://github.com/ollama/ollama/releases/download/${tag}/ollama-linux-arm64.tgz ${{ env.epn }}-${version}.arm64.tgz "${ebuild_dir}/Manifest"
              g2 manifest upsert-from-url https://github.com/ollama/ollama/releases/download/${tag}/ollama-linux-amd64-rocm.tgz ${{ env.epn }}-${version}.rocm.tgz "${ebuild_dir}/Manifest"
              
            fi
            break
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${{ env.epn }} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
