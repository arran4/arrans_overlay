name: app-misc/moondream2-llamafile Update

permissions:
  contents: write

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/app-misc-moondream2-llamafile-bin-update.yaml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ebuild_category: app-misc
  ebuild_name_prefix: ""
  ebuild_name_suffix: "llamafile-bin"
  huggingface_owner: cjpais
  huggingface_repo: moondream2-llamafile
  huggingface_repo_branch: main
  homepage: "https://huggingface.co/cjpais/moondream2-llamafile"
  workflowfile: "app-misc-moondream2-llamafile-bin-update.yaml"
  license: "Apache 2.0"
  description: "Run $model, a small vision language model designed to run efficiently on edge devices, in a single binary executable using llamafile."

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils
          url="$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/arran4/g2/releases/latest | jq -r '.assets[].browser_download_url | select(endswith("_linux_amd64.deb"))')"
          echo "$url"
          wget "${url}" -O /tmp/g2.deb
          sudo dpkg -i /tmp/g2.deb
          rm /tmp/g2.deb

      - name: Process each release
        id: process_releases
        run: |
          models="$(curl https://huggingface.co/api/models/${{env.huggingface_owner}}/${{env.huggingface_repo}} | jq -r '.siblings[].rfilename | capture("^(?<a>.*).llamafile$").a')"
          declare -A grouped=()
          for model in ${models}; do 
            mn="$(echo "$model" | cut -f 1 -d-)";
            mv="$(echo "$model" | cut -s -f 2- -d-)"; 
            if [[ ! -v grouped[$mn] ]]; then 
              grouped[$mn]="${mv:-full}"; 
            else 
              grouped[$mn]="${grouped[$mn]} ${mv:-full}"; 
            fi;
          done
          for model in "${!grouped[@]}"; do
            ebuild_name="${{env.ebuild_name_prefix}}${model}${{env.ebuild_name_suffix}}"
            ebuild_dir="./${{env.ebuild_category}}/${ebuild_name}"
            echo "Processing model $model"
            mkdir -p $ebuild_dir
            version=0
            revision=-r1
            ebuild_file="${ebuild_dir}/${ebuild_name}-${version}${revision}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              {
                echo "# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/${{ env.workflowfile }}"
                echo "EAPI=8"
                echo "DESCRIPTION=\"${{env.description}}\""
                echo "HOMEPAGE=\"$homepage\""
                echo -n 'IUSE="systemd '
                for variant in ${grouped[$model]}; do
                  if [ "${variant}" = "full" ]; then
                    echo -n "+full ";
                    continue
                  fi
                  echo -n "$variant "
                done
                echo '"'
                echo 'SRC_URI="amd64? ( '
                for variant in ${grouped[$model]}; do
                  if [ "${variant}" = "full" ]; then
                    echo "  full? ( https://huggingface.co/${{env.huggingface_owner}}/${{env.huggingface_repo}}/resolve/${{env.huggingface_repo_branch}}/${model}.llamafile?download=true -> \${P}.amd64 )"
                    continue
                  fi
                  echo "  $variant? ( https://huggingface.co/${{env.huggingface_owner}}/${{env.huggingface_repo}}/resolve/${{env.huggingface_repo_branch}}/${model}-${variant}.llamafile?download=true -> \${P}.${variant}.amd64 )"
                done
                echo ')"'
                echo "LICENSE=\"${{ env.license }}\""
                echo "SLOT=\"0\""
                echo 'KEYWORDS="~amd64"'
                echo 'RDEPEND="systemd? ( acct-group/llamafile acct-user/llamafile )"'
                echo 'DEPEND="${RDEPEND}"'
                echo "S=\"\${WORKDIR}\""
                echo ""
                echo "src_unpack() {"
                for variant in ${grouped[$model]}; do
                  mvfn="${model}.llamafile"
                  mvafn='${P}.amd64'
                  condition=full
                  if [ "${variant}" != "full" ]; then
                    mvfn="${model}-${variant}.llamafile"
                    mvafn="\${P}.\${variant}.amd64"
                    condition="${variant}"
                  fi
                  echo "    if use $condition; then"
                  echo "      cp \"\${DISTDIR}/${mvafn}\" '$mvfn' || die 'failed to move $mvfn'"
                  echo "      chmod +x '${mvfn}' || die 'failed to chmod $mvfn'"
                  echo "    fi"
                done
                echo "}"
                echo ""
                echo "src_install() {"
                echo "    exeinto /opt/bin"
                for variant in ${grouped[$model]}; do
                  mvfn="${model}.llamafile"
                  condition=full
                  if [ "${variant}" != "full" ]; then
                    mvfn="${model}-${variant}.llamafile"
                    condition="${variant}"
                  fi
                  echo "    if use $condition; then"
                  echo "      doexe \"\${WORKDIR}/${mvfn}\""
                  echo "    fi"
                done
                echo "}"
                echo ""
                echo "pkg_postinst() {"
                  echo "    einfo \"Quick guide:\""
                for variant in ${grouped[$model]}; do
                  mvfn="${model}.llamafile"
                  condition=full
                  if [ "${variant}" != "full" ]; then
                    mvfn="${model}-${variant}.llamafile"
                    condition="${variant}"
                  fi
                  echo "    if use $condition; then"
                  echo "      doexe \"\${WORKDIR}/${mvfn}\""
                  echo "      einfo \"${mvfn} --host 0.0.0.0 --port 51524 --convert -pc -pr -pp\""
                  echo '      einfo "curl 127.0.0.1:51524/inference -H \"Content-Type: multipart/form-data\" -F file=\"@<file-path>\"  -F temperature=\"0.0\"  -F temperature_inc=\"0.2\"  -F response_format=\"json\""'
                  echo "      if use systemd; then"
                  echo "      einfo \"Creating systemd service file...\""
                  echo '      {'
                  echo '        echo "[Unit]"'
                  echo "        echo \"Description=llamafile ${model} ${condition}\""
                  echo '        echo "After=network-online.target"'
                  echo '        echo ""'
                  echo '        echo "[Service]"'
                  echo "        echo \"ExecStart=/bin/bash -c '/opt/bin/${mvfn}  --host 0.0.0.0 --port 51524 --convert'\""
                  echo '        echo "WorkingDirectory=/var/lib/llamafile"'
                  echo '        echo "User=llamafile"'
                  echo '        echo "Group=llamafile"'
                  echo '        echo "Restart=always"'
                  echo '        echo "RestartSec=3"'
                  echo '        echo ""'
                  echo '        echo "[Install]"'
                  echo '        echo "WantedBy=default.target"'
                  echo "      } > /usr/lib/systemd/system/${mvfn}.service"
                  echo "      einfo \"Service file created at /etc/systemd/system/${mvfn}.service\""
                  echo "      einfo \"Making service user-startable...\""
                  echo '      mkdir -p /etc/systemd/user'
                  echo "      ln -s /usr/lib/systemd/system/${mvfn}.service /etc/systemd/system/${mvfn}.service"
                  echo "      ln -s /usr/lib/systemd/system/${mvfn}.service /etc/systemd/user/${mvfn}.service"
                  echo "      fi"
                  echo "    fi"
                done
                echo "}"
                echo ""
              } > $ebuild_file
              
              # Generate the manifest for the new ebuild
              for variant in ${grouped[$model]}; do
                url="https://huggingface.co/${{env.huggingface_owner}}/${{env.huggingface_repo}}/resolve/${{env.huggingface_repo_branch}}/${model}.llamafile?download=true"
                fn="${ebuild_name}-${version}.amd64"
                if [ "${variant}" != "full" ]; then
                  url="https://huggingface.co/${{env.huggingface_owner}}/${{env.huggingface_repo}}/resolve/${{env.huggingface_repo_branch}}/${model}-${variant}.llamafile?download=true"
                  fn="${ebuild_name}-${version}.${variant}.amd64"
                fi
                g2 manifest upsert-from-url "${url}" "${fn}" "${ebuild_dir}/Manifest"
              done
            fi
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${ebuild_category}/${ebuild_name}"
          git add "./${ebuild_dir}"
          git commit -m "Add ebuilds for new ${ebuild_name} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
